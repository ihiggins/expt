import {
  app,
  BrowserWindow,
  globalShortcut,
  clipboard,
  ipcMain,
  ipcRenderer,
} from "electron";
import ReactDOM from "react-dom";

require("@electron/remote/main").initialize();

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

import clipboardListener from "clipboard-event";

const createWindow = (): void => {
  console.log("windowmade");
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    title: "Expt",
    icon: "./icon.png",
    titleBarStyle: "hidden",
    resizable: false,
    frame: false,
    transparent: true,
    webPreferences: {
      //@ts-ignore
      enableRemoteModule: true,
      contextIsolation: false,
      nodeIntegration: true,
      devTools: true,
      preload: "C:Users/isaac/Desktop/expt/src/preload.js",
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  require("@electron/remote/main").enable(mainWindow.webContents);
  // To start listening

  ipcMain.on("min", (event, arg) => {
    mainWindow.hide();
  });

  ipcMain.on("copy", (event, arg) => {
    clipboard.writeText(arg);
  });

  mainWindow.on("minimize", function (event) {
    event.preventDefault();
    mainWindow.hide();
  });

  mainWindow.on("close", function (event) {
    event.preventDefault();
    mainWindow.hide();
  });

  clipboardListener.startListening();
  clipboardListener.on("change", () => {
    if (!mainWindow.isFocused()) {
      const text = clipboard.readText();
      mainWindow.webContents.send("clippy", text);
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  console.log("wtf is this");

  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on("close", (event, arg) => {
  app.quit();
});
